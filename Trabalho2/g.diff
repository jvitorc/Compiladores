diff --git a/Trabalho2/.antlr/gramaticaParser.java b/Trabalho2/.antlr/gramaticaParser.java
index a507312..ab8dfd1 100644
--- a/Trabalho2/.antlr/gramaticaParser.java
+++ b/Trabalho2/.antlr/gramaticaParser.java
@@ -619,7 +619,7 @@ public class gramaticaParser extends Parser {
 			((VardeclContext)_localctx).IDENT = match(IDENT);
 			setState(139);
 			((VardeclContext)_localctx).b = b(((VardeclContext)_localctx).a.value);
-			insert_symbol_table((((VardeclContext)_localctx).IDENT!=null?((VardeclContext)_localctx).IDENT.getText():null), ((VardeclContext)_localctx).b.syn)
+			insert_symbol_table(((VardeclContext)_localctx).IDENT, ((VardeclContext)_localctx).b.syn)
 			}
 		}
 		catch (RecognitionException re) {
@@ -1423,7 +1423,7 @@ public class gramaticaParser extends Parser {
 			setState(232);
 			((NumexpressionContext)_localctx).e = e(((NumexpressionContext)_localctx).term.node);
 			_localctx.node = ((NumexpressionContext)_localctx).term.node
-			insert_expression_table(((NumexpressionContext)_localctx).e.syn.pre_order([]))
+			insert_expression_table(((NumexpressionContext)_localctx).e.syn)
 			}
 		}
 		catch (RecognitionException re) {
@@ -1713,7 +1713,7 @@ public class gramaticaParser extends Parser {
 				{
 				setState(265);
 				((FactorContext)_localctx).INT_CONSTANT = match(INT_CONSTANT);
-				_localctx.node = Leaf('INT_CONSTANT', (((FactorContext)_localctx).INT_CONSTANT!=null?((FactorContext)_localctx).INT_CONSTANT.getText():null)) 
+				_localctx.node = Leaf(((FactorContext)_localctx).INT_CONSTANT, 'int') 
 				}
 				break;
 			case FLOAT_CONSTANT:
@@ -1721,7 +1721,7 @@ public class gramaticaParser extends Parser {
 				{
 				setState(267);
 				((FactorContext)_localctx).FLOAT_CONSTANT = match(FLOAT_CONSTANT);
-				_localctx.node = Leaf('FLOAT_CONSTANT', (((FactorContext)_localctx).FLOAT_CONSTANT!=null?((FactorContext)_localctx).FLOAT_CONSTANT.getText():null))
+				_localctx.node = Leaf(((FactorContext)_localctx).FLOAT_CONSTANT, 'float')
 				}
 				break;
 			case STRING_CONSTANT:
@@ -1729,7 +1729,7 @@ public class gramaticaParser extends Parser {
 				{
 				setState(269);
 				((FactorContext)_localctx).STRING_CONSTANT = match(STRING_CONSTANT);
-				_localctx.node = Leaf('STRING_CONSTANT', (((FactorContext)_localctx).STRING_CONSTANT!=null?((FactorContext)_localctx).STRING_CONSTANT.getText():null))
+				_localctx.node = Leaf(((FactorContext)_localctx).STRING_CONSTANT, 'str')
 				}
 				break;
 			case NULL:
@@ -1737,7 +1737,7 @@ public class gramaticaParser extends Parser {
 				{
 				setState(271);
 				((FactorContext)_localctx).NULL = match(NULL);
-				_localctx.node = Leaf('NULL.type', (((FactorContext)_localctx).NULL!=null?((FactorContext)_localctx).NULL.getText():null))
+				_localctx.node = Leaf(((FactorContext)_localctx).NULL, 'null')
 				}
 				break;
 			case IDENT:
@@ -1866,7 +1866,7 @@ public class gramaticaParser extends Parser {
 			{
 			setState(291);
 			((LvalueContext)_localctx).IDENT = match(IDENT);
-			_localctx.node = Leaf('IDENT', (((LvalueContext)_localctx).IDENT!=null?((LvalueContext)_localctx).IDENT.getText():null))
+			_localctx.node = Leaf(((LvalueContext)_localctx).IDENT, 'ident')
 			setState(293);
 			g();
 			}
diff --git a/Trabalho2/arvore.py b/Trabalho2/arvore.py
index cef4d5d..b420494 100644
--- a/Trabalho2/arvore.py
+++ b/Trabalho2/arvore.py
@@ -1,8 +1,10 @@
+from tabela import *
+
 expression_table = []
 
 def insert_expression_table(data):
-    expression_table.append(data)
-
+    expression_table.append(data.pre_order([]))
+    print(data.pre_order([]), data.p_v())
 
 class Node:
 
@@ -16,22 +18,49 @@ class Node:
         
         if type(self.left) != None:
             l = self.left.pre_order(l)
-        
+
         if type(self.right) != None:
             l = self.right.pre_order(l)
         return l
 
 
+    def p_v(self):
+        t = self.verificar([])
+        anterior, y = t[0]
+        for x, y in t:
+            if x != anterior:
+                return False
+        return True    
+
+
+
+    def verificar(self, t=[]):
+        
+        if type(self.left) != None:
+            t = self.left.verificar(t)
+
+        if type(self.right) != None:
+            t = self.right.verificar(t)
+        return t
+
+
 class Leaf:
 
-    def __init__(self, token=None, data=None):
-        self.data = data
-        self.type = token
+    def __init__(self, token=None, text=None):
+        self.text = text
+        self.token = token
 
     def pre_order(self, l=[]):
-        l.append(self.data)        
+        l.append(self.token.text)
         return l
 
+    def verificar(self, t=[]):
+        if self.text == 'ident':
+            t.append((symbol_table[self.token.text][1], symbol_table[self.token.text][0]))
+        else:
+            t.append((self.text, self.token))
+        return t
+
 if __name__ == "__main__":
 
     tree = Node("1", Node("2", Leaf("T", "3"), Leaf("T", "4")), Leaf("T","5"))
diff --git a/Trabalho2/gramatica.g4 b/Trabalho2/gramatica.g4
index 3150ddc..1dcd09d 100644
--- a/Trabalho2/gramatica.g4
+++ b/Trabalho2/gramatica.g4
@@ -37,7 +37,7 @@ b[inhr] returns [syn]: COLCHA INT_CONSTANT COLCHF b["vector(%s, %s)" %($inhr, $I
     | {$syn = $inhr}
     ;
 
-vardecl: a IDENT b[$a.value] {insert_symbol_table($IDENT.text, $b.syn)};
+vardecl: a IDENT b[$a.value] {insert_symbol_table($IDENT, $b.syn)};
 
 c: expression
     | allocexpression
@@ -94,7 +94,7 @@ e[inhr] returns [syn]: maisoumenos term e[Node($maisoumenos.value, $inhr, $term.
     | {$syn = $inhr}
     ;
 
-numexpression returns [$node]: term e[$term.node] {$node = $term.node} {insert_expression_table($e.syn.pre_order([]))};
+numexpression returns [$node]: term e[$term.node] {$node = $term.node} {insert_expression_table($e.syn)};
 
 mdm returns [value]: MULTIPLICACAO {$value = $MULTIPLICACAO.text}
     | DIVISAO {$value = $DIVISAO.text}
@@ -112,10 +112,10 @@ unaryexpr returns [node]: maisoumenos factor {$node = Node($maisoumenos.value, r
     ;
 
 
-factor returns [node]: INT_CONSTANT {$node = Leaf('INT_CONSTANT', $INT_CONSTANT.text) }
-    | FLOAT_CONSTANT {$node = Leaf('FLOAT_CONSTANT', $FLOAT_CONSTANT.text)}
-    | STRING_CONSTANT {$node = Leaf('STRING_CONSTANT', $STRING_CONSTANT.text)}
-    | NULL {$node = Leaf('NULL.type', $NULL.text)}
+factor returns [node]: INT_CONSTANT {$node = Leaf($INT_CONSTANT, 'int') }
+    | FLOAT_CONSTANT {$node = Leaf($FLOAT_CONSTANT, 'float')}
+    | STRING_CONSTANT {$node = Leaf($STRING_CONSTANT, 'str')}
+    | NULL {$node = Leaf($NULL, 'null')}
     | lvalue {$node = $lvalue.node}
     | PARENTEA numexpression {$node = $numexpression.node} PARENTEF
     ;
@@ -124,7 +124,7 @@ g: COLCHA numexpression COLCHF g
     |
     ;
 
-lvalue returns [node]: IDENT {$node = Leaf('IDENT', $IDENT.text)} g;
+lvalue returns [node]: IDENT {$node = Leaf($IDENT, 'ident')} g;
 
 DEF: 'def';
 INT: 'int';
diff --git a/Trabalho2/gramaticaParser.py b/Trabalho2/gramaticaParser.py
index 357c1da..d5a2109 100644
--- a/Trabalho2/gramaticaParser.py
+++ b/Trabalho2/gramaticaParser.py
@@ -853,7 +853,7 @@ class gramaticaParser ( Parser ):
             localctx._IDENT = self.match(gramaticaParser.IDENT)
             self.state = 139
             localctx._b = self.b(localctx._a.value)
-            insert_symbol_table((None if localctx._IDENT is None else localctx._IDENT.text), localctx._b.syn)
+            insert_symbol_table(localctx._IDENT, localctx._b.syn)
         except RecognitionException as re:
             localctx.exception = re
             self._errHandler.reportError(self, re)
@@ -1855,7 +1855,7 @@ class gramaticaParser ( Parser ):
             self.state = 232
             localctx._e = self.e(localctx._term.node)
             localctx.node = localctx._term.node
-            insert_expression_table(localctx._e.syn.pre_order([]))
+            insert_expression_table(localctx._e.syn)
         except RecognitionException as re:
             localctx.exception = re
             self._errHandler.reportError(self, re)
@@ -2184,25 +2184,25 @@ class gramaticaParser ( Parser ):
                 self.enterOuterAlt(localctx, 1)
                 self.state = 265
                 localctx._INT_CONSTANT = self.match(gramaticaParser.INT_CONSTANT)
-                localctx.node = Leaf('INT_CONSTANT', (None if localctx._INT_CONSTANT is None else localctx._INT_CONSTANT.text)) 
+                localctx.node = Leaf(localctx._INT_CONSTANT, 'int') 
                 pass
             elif token in [gramaticaParser.FLOAT_CONSTANT]:
                 self.enterOuterAlt(localctx, 2)
                 self.state = 267
                 localctx._FLOAT_CONSTANT = self.match(gramaticaParser.FLOAT_CONSTANT)
-                localctx.node = Leaf('FLOAT_CONSTANT', (None if localctx._FLOAT_CONSTANT is None else localctx._FLOAT_CONSTANT.text))
+                localctx.node = Leaf(localctx._FLOAT_CONSTANT, 'float')
                 pass
             elif token in [gramaticaParser.STRING_CONSTANT]:
                 self.enterOuterAlt(localctx, 3)
                 self.state = 269
                 localctx._STRING_CONSTANT = self.match(gramaticaParser.STRING_CONSTANT)
-                localctx.node = Leaf('STRING_CONSTANT', (None if localctx._STRING_CONSTANT is None else localctx._STRING_CONSTANT.text))
+                localctx.node = Leaf(localctx._STRING_CONSTANT, 'str')
                 pass
             elif token in [gramaticaParser.NULL]:
                 self.enterOuterAlt(localctx, 4)
                 self.state = 271
                 localctx._NULL = self.match(gramaticaParser.NULL)
-                localctx.node = Leaf('NULL.type', (None if localctx._NULL is None else localctx._NULL.text))
+                localctx.node = Leaf(localctx._NULL, 'null')
                 pass
             elif token in [gramaticaParser.IDENT]:
                 self.enterOuterAlt(localctx, 5)
@@ -2336,7 +2336,7 @@ class gramaticaParser ( Parser ):
             self.enterOuterAlt(localctx, 1)
             self.state = 291
             localctx._IDENT = self.match(gramaticaParser.IDENT)
-            localctx.node = Leaf('IDENT', (None if localctx._IDENT is None else localctx._IDENT.text))
+            localctx.node = Leaf(localctx._IDENT, 'ident')
             self.state = 293
             self.g()
         except RecognitionException as re:
diff --git a/Trabalho2/in.txt b/Trabalho2/in.txt
index 30fdc8f..3303880 100644
--- a/Trabalho2/in.txt
+++ b/Trabalho2/in.txt
@@ -1,7 +1,7 @@
 {
-x = 1+3+5;
-x = 1*2+3*4;
 int a;
+x = 1+3+5;
+x = a*2+3*4;
 float b;
 string c;
 int d[1];
diff --git a/Trabalho2/tabela.py b/Trabalho2/tabela.py
index b00cf26..313de1a 100644
--- a/Trabalho2/tabela.py
+++ b/Trabalho2/tabela.py
@@ -1,5 +1,6 @@
 symbol_table = {}
 
 def insert_symbol_table(name, t):
-    if name not in symbol_table.keys():
-        symbol_table[name] = t
+    if name.text not in symbol_table.keys():
+        symbol_table[name.text] = (name, t)
+
diff --git a/Trabalho2/gramatica.g4 b/Trabalho2/gramatica.g4
index 3150ddc..1dcd09d 100644
--- a/Trabalho2/gramatica.g4
+++ b/Trabalho2/gramatica.g4
@@ -37,7 +37,7 @@ b[inhr] returns [syn]: COLCHA INT_CONSTANT COLCHF b["vector(%s, %s)" %($inhr, $I
     | {$syn = $inhr}
     ;
 
-vardecl: a IDENT b[$a.value] {insert_symbol_table($IDENT.text, $b.syn)};
+vardecl: a IDENT b[$a.value] {insert_symbol_table($IDENT, $b.syn)};
 
 c: expression
     | allocexpression
@@ -94,7 +94,7 @@ e[inhr] returns [syn]: maisoumenos term e[Node($maisoumenos.value, $inhr, $term.
     | {$syn = $inhr}
     ;
 
-numexpression returns [$node]: term e[$term.node] {$node = $term.node} {insert_expression_table($e.syn.pre_order([]))};
+numexpression returns [$node]: term e[$term.node] {$node = $term.node} {insert_expression_table($e.syn)};
 
 mdm returns [value]: MULTIPLICACAO {$value = $MULTIPLICACAO.text}
     | DIVISAO {$value = $DIVISAO.text}
@@ -112,10 +112,10 @@ unaryexpr returns [node]: maisoumenos factor {$node = Node($maisoumenos.value, r
     ;
 
 
-factor returns [node]: INT_CONSTANT {$node = Leaf('INT_CONSTANT', $INT_CONSTANT.text) }
-    | FLOAT_CONSTANT {$node = Leaf('FLOAT_CONSTANT', $FLOAT_CONSTANT.text)}
-    | STRING_CONSTANT {$node = Leaf('STRING_CONSTANT', $STRING_CONSTANT.text)}
-    | NULL {$node = Leaf('NULL.type', $NULL.text)}
+factor returns [node]: INT_CONSTANT {$node = Leaf($INT_CONSTANT, 'int') }
+    | FLOAT_CONSTANT {$node = Leaf($FLOAT_CONSTANT, 'float')}
+    | STRING_CONSTANT {$node = Leaf($STRING_CONSTANT, 'str')}
+    | NULL {$node = Leaf($NULL, 'null')}
     | lvalue {$node = $lvalue.node}
     | PARENTEA numexpression {$node = $numexpression.node} PARENTEF
     ;
@@ -124,7 +124,7 @@ g: COLCHA numexpression COLCHF g
     |
     ;
 
-lvalue returns [node]: IDENT {$node = Leaf('IDENT', $IDENT.text)} g;
+lvalue returns [node]: IDENT {$node = Leaf($IDENT, 'ident')} g;
 
 DEF: 'def';
 INT: 'int';
diff --git a/Trabalho2/gramatica.g4 b/Trabalho2/gramatica.g4
index 3150ddc..1dcd09d 100644
--- a/Trabalho2/gramatica.g4
+++ b/Trabalho2/gramatica.g4
@@ -37,7 +37,7 @@ b[inhr] returns [syn]: COLCHA INT_CONSTANT COLCHF b["vector(%s, %s)" %($inhr, $I
     | {$syn = $inhr}
     ;
 
-vardecl: a IDENT b[$a.value] {insert_symbol_table($IDENT.text, $b.syn)};
+vardecl: a IDENT b[$a.value] {insert_symbol_table($IDENT, $b.syn)};
 
 c: expression
     | allocexpression
@@ -94,7 +94,7 @@ e[inhr] returns [syn]: maisoumenos term e[Node($maisoumenos.value, $inhr, $term.
     | {$syn = $inhr}
     ;
 
-numexpression returns [$node]: term e[$term.node] {$node = $term.node} {insert_expression_table($e.syn.pre_order([]))};
+numexpression returns [$node]: term e[$term.node] {$node = $term.node} {insert_expression_table($e.syn)};
 
 mdm returns [value]: MULTIPLICACAO {$value = $MULTIPLICACAO.text}
     | DIVISAO {$value = $DIVISAO.text}
@@ -112,10 +112,10 @@ unaryexpr returns [node]: maisoumenos factor {$node = Node($maisoumenos.value, r
     ;
 
 
-factor returns [node]: INT_CONSTANT {$node = Leaf('INT_CONSTANT', $INT_CONSTANT.text) }
-    | FLOAT_CONSTANT {$node = Leaf('FLOAT_CONSTANT', $FLOAT_CONSTANT.text)}
-    | STRING_CONSTANT {$node = Leaf('STRING_CONSTANT', $STRING_CONSTANT.text)}
-    | NULL {$node = Leaf('NULL.type', $NULL.text)}
+factor returns [node]: INT_CONSTANT {$node = Leaf($INT_CONSTANT, 'int') }
+    | FLOAT_CONSTANT {$node = Leaf($FLOAT_CONSTANT, 'float')}
+    | STRING_CONSTANT {$node = Leaf($STRING_CONSTANT, 'str')}
+    | NULL {$node = Leaf($NULL, 'null')}
     | lvalue {$node = $lvalue.node}
     | PARENTEA numexpression {$node = $numexpression.node} PARENTEF
     ;
@@ -124,7 +124,7 @@ g: COLCHA numexpression COLCHF g
     |
     ;
 
-lvalue returns [node]: IDENT {$node = Leaf('IDENT', $IDENT.text)} g;
+lvalue returns [node]: IDENT {$node = Leaf($IDENT, 'ident')} g;
 
 DEF: 'def';
 INT: 'int';
